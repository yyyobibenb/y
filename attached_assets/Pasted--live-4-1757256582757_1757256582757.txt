ПРОМПТ ДЛЯ НЕЙРОСЕТИ / СПЕЦИФИКАЦИЯ
Цель

Собрать и поддерживать live-ленту на сайте букмекерки по 4 видам спорта (football, basketball, hockey, volleyball), делая 1 комбо-запрос /5 минут на каждый спорт через API-SPORTS. Комбо-запрос (?live=all) возвращает и список live-матчей, и текущий счёт/статус — из одного ответа:

обновляем счёт/голы,

пересобираем пул (до 9 live); если матч завершился — сразу заменяем новым из ответа.

Провайдер и эндпоинты

Football (API-FOOTBALL v3): GET https://v3.football.api-sports.io/fixtures?live=all

Basketball (API-BASKETBALL v1): GET https://v1.basketball.api-sports.io/games?live=all

Hockey (API-HOCKEY v1): GET https://v1.hockey.api-sports.io/games?live=all

Volleyball (API-VOLLEYBALL v1): GET https://v1.volleyball.api-sports.io/games?live=all
Хедер везде одинаковый: x-apisports-key: <текущий_ключ_для_этого_спорта>.

Политики/лимиты

Free-план: 100 запросов/день на продукт (спорт) на ключ, сброс суточной квоты в 00:00 UTC.

Минутный лимит около 10 req/min на продукт. Мы делаем 1 запрос /5 мин на спорт ⇒ 0.2 req/min (с огромным запасом).

Частоты и суточные объёмы

На один спорт: 1440 / 5 = 288 запросов/день.

3 ключа на спорт ⇒ квота 300/день на спорт ⇒ 288/день укладывается.

Пример ротации по времени (если тики стартуют в 00:00 UTC):

с K1: первые 100 запросов ≈ 8 ч 20 мин,

затем K2: следующие 100 ≈ ещё 8 ч 20 мин,

затем K3: оставшиеся ≈88 ≈ 7 ч 20 мин — до полуночи UTC.

Важно: учёт и ротация ведутся по каждому спорту отдельно. Если старт у всех спортов синхронный, их ключи будут примерно одновременно доходить до 100, но переключение всё равно происходит пер-спорт.

Логика планировщика

Каждый спорт имеет один тикер /5 минут (±джиттер):

Выбрать текущий ключ для спорта (см. «Ротация ключей» ниже).

GET ...?live=all для соответствующего спорта.

Из ответа:

обновить счёты/статусы у матчей текущего пула,

пересобрать пул до 9 live-матчей (если live < 9 — отдать ровно сколько есть; опционально добирать SOON ≤ 15 мин с меткой status:"SOON").

если какой-то матч завершился — убрать его и заменить следующим из live-списка немедленно (в рамках этого же ответа).

Отправить фронту события:

score_update — если изменился счёт у любого из матчей в пуле,

pool_update — если состав пулa изменился.

Учитывать джиттер ±2–5 с между спортами, чтобы не формировать «залпы».

Ротация трёх ключей (по 100 запросов/день каждый, пер-спорт)

Держим состояние на каждый спорт:

{
  "keys": ["K1","K2","K3"],
  "current": 0,
  "usedToday": { "K1": 0, "K2": 0, "K3": 0 }
}


DAILY_QUOTA = 100. RESET всех счётчиков — строго в 00:00 UTC.

Правило переключения (пер-спорт):

Перед запросом берём key = keys[current].

Если usedToday[key] >= 100, делаем current = (current + 1) % 3 и пробуем следующий; повторяем, пока не найдём ключ с usedToday < 100.

Если все три >= 100 — только этот спорт уходит в stale режим до 00:00 UTC (отдаём последний валидный снапшот; другие спорты продолжают работу).

После успешного запроса инкрементируем usedToday[key]++.

При ответе 429 с текстом про дневной лимит — немедленно помечаем текущий ключ как usedToday=100 и пробуем следующий.

Контроль минутного лимита и устойчивость

Глобальный токен-бакет ≤ 10 req/min на продукт (с запасом у нас и так ~0.2 req/min).

Retry-политика: на 5xx/сетевых — backoff 0.5s → 2s → 5s (до 3 попыток). На 429 (rate) — подождать 10–30s и повторить; на 429 (daily limit) — пометить ключ исчерпанным и переключиться.

Circuit-breaker пер-спорт: 3 подряд фейла — пауза 2 минуты для этого спорта, затем повтор.

Нормализация (единый формат матча)
{
  "id": "string",                       // fixture.id / game.id
  "sport": "football|basketball|hockey|volleyball",
  "league": "string|null",
  "startedAt": "ISO8601|null",
  "status": "LIVE|HT|Q2|OT|PAUSED|FT|FINISHED",
  "teams": { "home": "string", "away": "string" },
  "score": { "home": 0, "away": 0 },    // голы/очки (total)
  "provider": "api-sports",
  "raw": {}
}


Критерий LIVE (быстро):

Football: fixture.status.short ∈ {"1H","2H","ET","P"} или есть % в status.elapsed.

Basketball/Hockey/Volleyball: status.short не в {"FT","NS"}.

Выход для фронта
{
  "updatedAt": "ISO8601",
  "sports": {
    "football":   [ /* 0..9 матчей */ ],
    "basketball": [ /* 0..9 матчей */ ],
    "hockey":     [ /* 0..9 матчей */ ],
    "volleyball": [ /* 0..9 матчей */ ]
  },
  "quota": {
    "football":   { "K1": N, "K2": M, "K3": L, "limitPerKey": 100, "resetAtUTC": "00:00:00Z" },
    "basketball": { "K1": N, "K2": M, "K3": L, "limitPerKey": 100, "resetAtUTC": "00:00:00Z" },
    "hockey":     { "K1": N, "K2": M, "K3": L, "limitPerKey": 100, "resetAtUTC": "00:00:00Z" },
    "volleyball": { "K1": N, "K2": M, "K3": L, "limitPerKey": 100, "resetAtUTC": "00:00:00Z" }
  },
  "stale": false
}

Пояснения по «одновременно должны поменяться ключи»

Если все четыре спорта стартуют в одно время и строго держат /5 минут, то каждый спорт будет потреблять по 288 запросов/день и переключать свой текущий ключ примерно в одни и те же моменты (после 100, 200).

Но переключение — независимое: счётчики ведутся пер-спорт, и при любых отклонениях (ретраи, мелкий джиттер, фейлы) точное время переключения может слегка разойтись